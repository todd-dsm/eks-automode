#!/usr/bin/env bash
# shellcheck disable=SC2155,SC2154
# PURPOSE:  Generate some variables for AWS/EKS. This file is called with one
#           argument while sourcing it in.
# -----------------------------------------------------------------------------
#    EXEC:  source build.env <prod|stage>
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Check for arguments
if [[ "$#" -lt 1 ]]; then
    echo "Bro, where's my first argument: stage or prod?"
    return
fi

set -x
# -----------------------------------------------------------------------------
# Client Truths
export TF_VAR_myCo='smpl-cloud'
export myOrg='smpl'
export TF_VAR_myProject='eks-target'
export myComponent='base-infras'
# -----------------------------------------------------------------------------
export TF_VAR_dns_zone='ptest.us'
export TF_VAR_zone_private='false'
#export AWS_DEFAULT_REGION='us-gov-east-1'
#export TF_VAR_dns_zone='bb.vivsoft-lab.io'
#export TF_VAR_zone_private='true'
export AWS_DEFAULT_REGION='us-east-1'
export TF_VAR_region="$AWS_DEFAULT_REGION"

# account ---------------------------------------------------------------------
#export TF_VAR_zoneIdPrimary='ZPEASGC9BUTW5'
#export TF_VAR_domain="${TF_VAR_dns_zone%.*}"

###############################################################################
# The Build Environment
export env_build="$1"
# These will set names for: EKS-cluser, managed-node-groups, etc
export TF_VAR_project="${TF_VAR_myProject}-${env_build}"
export TF_VAR_cluster_apps="$TF_VAR_project"

# -----------------------------------------------------------------------------
# Provider Versions
export providerVersTFM='1.11.4'
export providerVersAWS='5.99.1'
export providerVersKubes='2.37.1'

# -- KUBERNETES ---------------------------------------------------------------
export K8S_VERSION='1.32'
export KUBECONFIG_DIR="${HOME}/.kube"
export KUBERNETES_MASTER="${KUBECONFIG_DIR}/${TF_VAR_cluster}.ktx"

# -- Terraform ----------------------------------------------------------------
export TF_VAR_bucketKey='env'
export TF_VAR_stateBucket="${myOrg}-${TF_VAR_myProject}"
export stateLockDynamoDB="${TF_VAR_stateBucket}-lock"

# -----------------------------------------------------------------------------
# Environmental Considerations
# Terraform Constants
case "$env_build" in
    stage)
        export TF_VAR_cluster_vault="vault-${TF_VAR_project}"
        export TF_VAR_DATADOG_UUID="stage"
        export TF_VAR_vpc_cidr='10.101.0.0/16'
        export TF_VAR_minDistSize='3'
        export TF_VAR_maxDistSize='12'
        export TF_VAR_kubeNode_type='t3.medium'
        ;;
    prod)
        export TF_VAR_cluster_vault="vault-${TF_VAR_project}"
        export TF_VAR_DATADOG_UUID="prod"
        export TF_VAR_vpc_cidr='10.100.0.0/16'
        export TF_VAR_minDistSize='4'
        export TF_VAR_maxDistSize='12'
        export TF_VAR_kubeNode_type='t3.medium'
        ;;
    *)  echo "$env_build is unsupported; exiting."
        ;;
esac

# -- Makefile -----------------------------------------------------------------
# Same for either ENV; depends on case
export outputDir='./var'
export filePlan="/tmp/tf-${TF_VAR_myProject}.plan"

# -- Karpenter ----------------------------------------------------------------
export KARPENTER_NAMESPACE='kube-system'
export CLUSTER_NAME="$TF_VAR_project"
export AWS_PARTITION='aws'   # <aws|aws-us-gov>
export AWS_ACCOUNT_ID='367652197469'
export TEMPOUT=$(mktemp)

# -- KUBERNETES ---------------------------------------------------------------
#export KUBERNETES_MASTER="${KUBECONFIG_DIR}/${TF_VAR_cluster_apps}"

# -- KubeDB -------------------------------------------------------------------
# Verify the version in the chart repo when incrementing up
# -- KubeDB -------------------------------------------------------------------
export versKubeDB='v2024.3.16'
export licKey='8275989e-b034-4f08-8039-9d9873d09d8f' # cluster UID

# -- RDBMS --------------------------------------------------------------------
export kubeDbNs='demo'
export pgAdminManifest="${outputDir}/pgadmin.yaml"
export rawPgSqlManifest="https://github.com/kubedb/docs/raw/${versKubeDB}/docs/examples/postgres/quickstart/quick-postgres.yaml"
export pgSqlFileName="${rawPgSqlManifest##*/}"
export pgSqlManifest="${outputDir}/${pgSqlFileName}"

# -----------------------------------------------------------------------------
# RDS CONSTANTS
# -----------------------------------------------------------------------------
#export TF_VAR_engine="postgres"
#export TF_VAR_identifier="${TF_VAR_myProject}-${TF_VAR_engine}-${env_build}"

# -----------------------------------------------------------------------------
# TESTING: What's my IP (public side of home gateway)
# -----------------------------------------------------------------------------
export TF_VAR_officeIPAddr="$(curl -s4 icanhazip.com)/32"

# Change TF backend prefix with ENV change: <stage|prod>
scripts/setup/create-tf-provider.sh

# -----------------------------------------------------------------------------
# Generate environment-specific tfvars file
# -----------------------------------------------------------------------------
mkdir -p envs

set +x
